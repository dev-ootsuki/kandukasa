import { type Validator } from '~/types/Types'
export const RegexFloat = /[+-]?([0-9]*[.])?[0-9]+/
export const RegexNumeric = /^\d*$/
export const RegexAscii = /^[a-zA-Z0-9!-/:-@¥[-`{-~]*$/
export const RegexEmail = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
export const RegexHiragana = /^[ぁ-んー]*$/
export const RegexKatakana = /^[ァ-ンヴー]*$/
export const RegexZenkaku = /^[^\x20-\x7e]*$/

export const qRequired:                Validator.Rule = { rule: "required",                                       message: "required"        }
export const qNumber:                  Validator.Rule = { rule: "regex",    regex: RegexNumeric,                  message: 'numeric'         }
export const qFloat:                   Validator.Rule = { rule: "regex",    regex: RegexFloat,                    message: 'float'           }
export const qAscii:                   Validator.Rule = { rule: "regex",    regex: RegexAscii,                    message: 'ascii'           }
export const qEmail:                   Validator.Rule = { rule: "regex",    regex: RegexEmail,                    message: 'email'           }
export const qHiragana:                Validator.Rule = { rule: "regex",    regex: RegexHiragana,                 message: 'hiragana'        } 
export const qKatakana:                Validator.Rule = { rule: "regex",    regex: RegexKatakana,                 message: 'katakana'        }
export const qZenkaku:                 Validator.Rule = { rule: "regex",    regex: RegexZenkaku,                  message: 'zenkaku'         }
export const qLengthTo16:              Validator.Rule = { rule: "clength",                     to:16,             message: 'length_to'       }
export const qLengthTo32:              Validator.Rule = { rule: "clength",                     to:32,             message: 'length_to'       }
export const qLengthTo64:              Validator.Rule = { rule: "clength",                     to:64,             message: 'length_to'       }
export const qLengthTo128:             Validator.Rule = { rule: "clength",                     to:128,            message: 'length_to'       }
export const qLengthTo256:             Validator.Rule = { rule: "clength",                     to:256,            message: 'length_to'       }
export const qLengthTo500:             Validator.Rule = { rule: "clength",                     to:500,            message: 'length_to'       }
export const qLengthTo1000:            Validator.Rule = { rule: "clength",                     to:1000,           message: 'length_to'       }
export const qLengthFrom2To32:         Validator.Rule = { rule: "clength",           from:2,   to:32,             message: 'length_from_to'  }
export const qRangeTo10:               Validator.Rule = { rule: "range",                       to:10,             message: 'range_to'        }
export const qRangeTo20:               Validator.Rule = { rule: "range",                       to:20,             message: 'range_to'        }
export const qRangeTo30:               Validator.Rule = { rule: "range",                       to:30,             message: 'range_to'        }
export const qRangeTo40:               Validator.Rule = { rule: "range",                       to:40,             message: 'range_to'        }
export const qRangeTo50:               Validator.Rule = { rule: "range",                       to:50,             message: 'range_to'        }
export const qRangeTo99:               Validator.Rule = { rule: "range",                       to:99,             message: 'range_to'        }
export const qRangeTo100:              Validator.Rule = { rule: "range",                       to:100,            message: 'range_to'        }
export const qRangeTo500:              Validator.Rule = { rule: "range",                       to:500,            message: 'range_to'        }
export const qRangeTo999:              Validator.Rule = { rule: "range",                       to:999,            message: 'range_to'        }
export const qRangeTo1000:             Validator.Rule = { rule: "range",                       to:1000,           message: 'range_to'        }
export const qRangeTo9999:             Validator.Rule = { rule: "range",                       to:9999,           message: 'range_to'        }
export const qRangeTo10000:            Validator.Rule = { rule: "range",                       to:10000,          message: 'range_to'        }
export const qRangeTo99999:            Validator.Rule = { rule: "range",                       to:99999,          message: 'range_to'        }
export const qRangeTo100000:           Validator.Rule = { rule: "range",                       to:100000,         message: 'range_to'        }
export const qRangeFrom1To100:         Validator.Rule = { rule: "range",             from:1,   to:100,            message: 'range_from_to'   }
export const qRangeFromMinus100To100:  Validator.Rule = { rule: "rangeIncludeMinus", from:-100, to:100,           message: 'range_from_to'   }
